@*
// Copyright (c) 2010-2013 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the global behavior for each Dump functions
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc.Model
@using System.Text;
@using SharpDoc;

@functions
{
    public string GetWikiContent(string page)
    {
        Model.FindTopicById("");
        
        if(Model.Config.WebDocumentation.Load(page))
        {
            Model.Config.WebDocumentation.InternalizeImages(Model.OutputDirectory, Model.Param.LinkToImg);

            StringBuilder content = new StringBuilder();
            content.Append("<div id='com-atlassian-confluence' class='theme-documentation  aui-theme-default aui-layout splitter-invoked'>").AppendLine();
                content.Append("<div id='full-height-container'>").AppendLine();
                    content.Append("<div id='splitter'>").AppendLine();
                        content.Append("<div id='splitter-content'>").AppendLine();
                            content.Append("<div id='main' class='aui-page-panel'>").AppendLine();
                                content.Append("<div id='content' class='page view'>").AppendLine();

                                    content.Append(Model.Config.WebDocumentation.GetContentByClass("wiki-content")).AppendLine();

                                content.Append("</div>").AppendLine();
                            content.Append("</div>").AppendLine();
                        content.Append("</div>").AppendLine();
                    content.Append("</div>").AppendLine();
                content.Append("</div>").AppendLine();
            content.Append("</div>").AppendLine();
            return content.ToString();
        }
        else
        {
            string notFoundUri = Model.Config.WebDocumentation.GetAbsoluteUri(page);
            return string.Format("<div class='error webNotFound'><div class='icon'></div>The page <a href='{0}'>{1}</a> could not be found in the extern web documentation.</div>", notFoundUri, page);
        }
    }
}

@{ 
    Model.GetWebDocContent = GetWikiContent;
}