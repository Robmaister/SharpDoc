@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the global behavior for replacing tags.
// This template must be included once from a top template.
// Tags currently supported:
// see cref/href
// seealso
// note
// code
// c
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc.Model
@using SharpDoc;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Xml;
@using System.IO;
@using System.Globalization;

@functions {
    public string ReplaceSee(Match match)
    {        
        string id = match.Groups[1].Value;
        if (match.Groups.Count == 3) {
            return ToUrl(id, match.Groups[2].Value);
        }
        return ToUrl(id);
    }

    public string ReplaceWebdoc(Match match)
    {
        string xmlCode = match.ToString();
        
        var document = new XmlDocument();
        try
        {
            document.LoadXml(xmlCode);
            var correspondingNode = document.DocumentElement;
            return Model.GetWebDocContent(correspondingNode, true);
        }
        catch(XmlException)
        {
            return string.Empty;
        }
    }

    public string ReplaceCode(Match match)
    {
        string xmlCode = match.ToString();
        
        var document = new XmlDocument();
        try
        {
            document.LoadXml(xmlCode);
            var correspondingNode = document.DocumentElement;
            var title = correspondingNode.Attributes["title"];
            var gutter = correspondingNode.Attributes["gutter"];
            var useGutter = (gutter != null && gutter.Value == "true") ? "true" : "false";
            
            var text = new StringBuilder();

            text.Append("<div class='code panel pdl'>").AppendLine();
                if(title != null)
                    text.AppendFormat("<div class='code_section title'>{0}</div>", title.Value).AppendLine();
                text.AppendFormat("<div class='codeContent panelContent pdl'><pre class='brush: csharp; gutter: {1}'>{0}</pre></div>", correspondingNode.InnerXml, useGutter).AppendLine();
            text.Append("</div>").AppendLine();
            return text.ToString();
        }
        catch(XmlException)
        {
            return string.Empty;
        }
    }

    public string ReplaceInsert(Match match)
    {
        string xmlCode = match.ToString();
        
        var document = new XmlDocument();
        try
        {
            document.LoadXml(xmlCode);
            var correspondingNode = document.DocumentElement;

            var type = correspondingNode.Attributes["type"];
            string typeTxt = null;
            string imgUrl = null;
            bool imgExist = false;

            if(type != null)
            {
                typeTxt = type.Value;
                imgUrl = Path.Combine(Model.Param.LinkToImg, typeTxt + ".gif");
                imgExist = File.Exists(Path.Combine(Model.OutputDirectory, "html", imgUrl));
            }
            if(!imgExist)
            {
                typeTxt = "note";
                imgUrl = Path.Combine(Model.Param.LinkToImg, "note.gif");
            }
            
            var title = correspondingNode.Attributes["title"];
            string titleText = null;

            if(title != null)
                titleText = title.Value;
            else
            {
                var context = new CultureInfo("en-US",false).TextInfo;
                titleText = context.ToTitleCase(typeTxt);
            }

            var text = new StringBuilder();

            text.Append("<table class='members insert'>").AppendLine();
                text.Append("<tbody>").AppendLine();
                    text.Append("<tr>").AppendLine();
                        text.Append("<th>").AppendLine();
                            text.Append("<span class='insert_title'>").AppendLine();
                                text.AppendFormat("<img alt='{0}' src='{1}' title='{0}'> {2}", typeTxt, imgUrl, titleText).AppendLine();
                            text.Append("</span>").AppendLine();
                        text.Append("</th>").AppendLine();
                    text.Append("</tr>").AppendLine();
                    text.Append("<tr>").AppendLine();
                        text.Append("<td>").AppendLine();
                            text.Append(correspondingNode.InnerXml).AppendLine();
                        text.Append("</td>").AppendLine();
                    text.Append("</tr>").AppendLine();
                text.Append("</tbody>").AppendLine();
            text.Append("</table>").AppendLine();
            return text.ToString();
        }
        catch(XmlException)
        {
            return string.Empty;
        }
    }
}

@{    
    Model.RegisterTagResolver(@"<see\s+cref=""(.*?)""\s*/>", ReplaceSee);
    Model.RegisterTagResolver(@"<see\s+cref=""(.*?)""\s*>(.*?)</see>", ReplaceSee);
    Model.RegisterTagResolver(@"<webdoc(.*?)>(.*?)</webdoc>", ReplaceWebdoc);
    Model.RegisterTagResolver(@"<code(.*?)>([\w\W]*?)</code>", ReplaceCode);
    Model.RegisterTagResolver(@"<insert(.*?)>([\w\W]*?)</insert>", ReplaceInsert);
}
